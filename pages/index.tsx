import type { GetServerSideProps, NextPage } from "next";
import { PrismaClient } from "@prisma/client";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import React, { useMemo, useState } from "react";

import * as df from "date-fns";
import { Line } from "react-chartjs-2";

type RoomInfo = {
  value: number;
  createdAt: number;
};

type MotionInfo = {
  createdAt: number;
};

type ServerProps = {
  rooms: {
    name: string;
    temperatures?: RoomInfo[];
    humidities?: RoomInfo[];
    lights?: RoomInfo[];
    motions?: MotionInfo[];
  }[];
};

const Home = ({ rooms }: ServerProps) => {
  const [room, setRoom] = useState(rooms[0] ?? []);

  const temperaturesGraphData = useMemo(
    () => ({
      labels: room.temperatures?.map((item) =>
        df.format(item.createdAt, "MM/dd HH:mm:ss")
      ),
      datasets: [
        {
          fill: "origin",
          fillColor: "#fcc",
          backgroundColor: "#fcc",
          borderColor: "#f55",
          data: room.temperatures?.map((item) => item.value),
          label: "温度",
        },
      ],
    }),
    [room]
  );
  console.log(temperaturesGraphData);
  const humidityGraphData = useMemo(
    () => ({
      labels: room.humidities?.map((item) =>
        df.format(item.createdAt, "HH:mm:ss")
      ),
      datasets: [
        {
          fillColor: "#cfc",
          borderColor: "#5f5",
          pointBackgroundColor: "#cfc",
          pointBorderColor: "#afa",
          data: room.humidities?.map((item) => item.value),
          label: "湿度",
        },
      ],
    }),
    [room]
  );
  const lightsGraphData = useMemo(
    () => ({
      labels: room.lights?.map((item) => df.format(item.createdAt, "HH:mm:ss")),
      datasets: [
        {
          fillColor: "#ccf",
          borderColor: "#55f",
          pointBackgroundColor: "#ccf",
          pointBorderColor: "#aaf",
          data: room.lights?.map((item) => item.value),
          label: "明るさ",
        },
      ],
    }),
    [room]
  );

  return (
    <div className={styles.container}>
      <Head>
        <title>Noa’s ARC</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1>お部屋の情報</h1>
      {rooms.length > 0 && (
        <select
          defaultValue={0}
          onChange={(e) => {
            const val = parseInt(e.target.value);
            setRoom(rooms[val]);
          }}
        >
          {rooms.map((item, index) => (
            <option
              key={`${index}-${item.name}`}
              label={item.name}
              value={index}
            />
          ))}
        </select>
      )}
      <div className="graph-container">
        <Line
          data={temperaturesGraphData}
          options={{
            scales: {
              yAxes: {
                max: 35,
                min: 0,
              },
            },
          }}
        />
        <Line
          data={humidityGraphData}
          options={{
            scales: {
              yAxes: {
                max: 70,
                min: 20,
              },
            },
          }}
        />
        <Line
          data={lightsGraphData}
          options={{
            scales: {
              yAxes: {
                max: 200,
                min: 0,
              },
            },
          }}
        />
      </div>

      <style jsx>{`
        .graph-container {
          width: 500px;
          height: 120px;
        }
      `}</style>
    </div>
  );
};

export default Home;
export const getServerSideProps: GetServerSideProps<ServerProps> = async (
  context
) => {
  const prisma = new PrismaClient();

  const lastWeek = new Date();

  // lastWeek.setDate(lastWeek.getDate() - 7);
  lastWeek.setTime(lastWeek.getTime() - 6);

  const rooms = await prisma.room.findMany({
    include: {
      motions: true,
      humidities: true,
      lights: true,
      temperatures: true,
    },
    where: {
      OR: {
        motions: {
          every: {
            created_at: {
              lt: lastWeek,
            },
          },
        },
        humidities: {
          every: {
            created_at: {
              lt: lastWeek,
            },
          },
        },
        lights: {
          every: {
            created_at: {
              lt: lastWeek,
            },
          },
        },
        temperatures: {
          every: {
            created_at: {
              lt: lastWeek,
            },
          },
        },
      },
    },
  });

  return {
    props: {
      rooms: rooms.map((room) => ({
        name: room.name,
        humidities: room.humidities.map((item) => ({
          value: item.humidity,
          createdAt: item.created_at.getTime(),
        })),
        temperatures: room.temperatures.map((item) => ({
          value: item.temperature,
          createdAt: item.created_at.getTime(),
        })),
        motions: room.motions.map((item) => ({
          createdAt: item.created_at.getTime(),
        })),
        lights: room.lights.map((item) => ({
          value: item.light,
          createdAt: item.created_at.getTime(),
        })),
      })),
    },
  };
};
